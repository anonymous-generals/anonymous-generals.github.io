//var main = (_=>{

var COL = ["red", "blue"]
var arrow_where = ["right", "left", "top", "bottom"]
var arrows = ["&#8594;", "&#8592;", "&#8593;", "&#8595;"]
var arrow_class = ["center-vertical", "center-vertical", "center-horizontal", "center-horizontal"];

function get_dir(x) {
    var f = (x) => {
        return [(0|(x/WIDTH)),+(x%WIDTH)]
    }
    if (x === undefined) return ""
    var src = f(x[1]);
    var dst = f(x[2]);
    var dir = "";
    if (src[0] == dst[0]) {
        if (src[1] > dst[1]) {
            dir = "W";
        } else {
            dir = "E";
        }
    } else {
        if (src[0] > dst[0]) {
            dir = "N";
        } else {
            dir = "S"
        }
    }
    return [src, dir]
}

function make_display(WIDTH, HEIGHT, generals, cities, mountains, main, do_header) {
    var table = $('<table id="map" style="border-spacing: 0px; padding: .2em">')
    var tbody = $('<tbody>')
    table.append(tbody)

    var header = $("<div>")
    if (do_header) {
        main.append(header)
    }

    header.append($("<table style='position: relative' id='game-leaderboard'><tbody><tr><td>Player</td><td>Army</td><td>Land</td><td rowspan=3 id=turn>Turn: sdf</td></tr></tbody></table>"))

    for (var i = 0; i < 2; i++) {
        header.find("#game-leaderboard").append($("<tr>")
                                                .append($('<td class="leaderboard-name ' + COL[i] + '">').text("Player " + i))
                                                .append($("<td class='army'>").text("0"))
                                                .append($("<td class='land'>").text("0")));
    }
    
    var show = []
    
    for (var i = 0; i < HEIGHT; i++) {
        var tr = $("<tr>")
        for (var j = 0; j < WIDTH; j++) {
            var elt = $("<td id="+show.length+">");
            show.push(elt[0])
            tr.append(elt)
        }
        tbody.append(tr)
    }
    main.append(table)

    cities[0].map((id,n) => {
        show[id].className = "city"
    })

    generals.map((id,n) => {
        show[id].className = "general"
    })

    mountains.map((id,n) => {
        show[id].className = "mountain"
    })
    return [show, header];
}

class Map {
    constructor(W, H, generals, cities, mountains) {
        this.grid = new Array(H*W).fill(0);
        this.w = W;
        this.h = H;
        this.generals = generals;
        this.saved_cities = cities;
        this.mountains = mountains
    }

    setup() {
        this.grid.fill(0);
        this.turn = 0;
        this.owner = {}
        this.owner[this.generals[0]] = 0
        this.owner[this.generals[1]] = 1
        this.saved_cities[0].map((x,i) => this.grid[x] = this.saved_cities[1][i]);
        this.cities = [...this.saved_cities[0]]
        this.cities.push(...this.generals)
        this.tick()
        this.tick()
        this.turn = 0;

    }

    serialize() {
        return [this.w, this.h, this.generals, this.saved_cities, this.mountains]
    }
    
    
    count_army(who) {
        return Object.keys(this.owner).filter(x=>this.owner[x] == who).map(x=>this.grid[x]).reduce((a,b)=>a+b);
    }

    count_land(who) {
        return Object.keys(this.owner).filter(x=>this.owner[x] == who).length;
    }
    
    count_cities(who) {
        return Object.keys(this.owner).filter(x=>this.owner[x] == who).map(x=>this.cities.indexOf(x) >= 0).reduce((a,b)=>a+b);
    }
    
    make_move(src, dx, dy) {
        var dst = src-dx+dy*this.w;
        if (((src%this.w) == (dst%this.w) ||
             Math.floor(src/this.w) == Math.floor(dst/this.w)) &&
            this.mountains.indexOf(dst) === -1
           ) {
            var next_map = this.apply_move([this.owner[src], src, dst, 0, 0]);
            return [next_map, [this.owner[src], src, dst, 0, 0]]
        }
        return [null, null];
    }
    
    apply_move(action) {
        var [who, src, dst, half, _] = action;
        if (this.owner[src] != who) {
            // can't do that
            sdf
            return;
        }
        
        var next = this.copy()
        
        var amt = half ? Math.floor(next.grid[src]/2) : next.grid[src]-1;
        if (next.owner[src] == next.owner[dst]) {
            next.grid[dst] += amt;
            next.grid[src] -= amt;
        } else {
            next.grid[dst] -= amt;
            next.grid[src] -= amt;
            if (next.grid[dst] < 0) {
                next.grid[dst] *= -1;
                next.owner[dst] = who;
            }
        }
        return next;
    }

    tick() {
        //var next = this.copy()
        if (this.turn%2 == 1) {
            this.cities.map(x => this.grid[x] += (this.owner[x] !== undefined))
        }
        if (this.turn%50 == 49) {
            this.tick25();
        }
        this.turn += 1
    }

    copy() {
        var elts = JSON.parse(JSON.stringify(this));
        var nmap = new Map(this.w, this.h, [], [[], []], [], null, null);
        for (var x in elts) {
            nmap[x] = elts[x];
        }
        //var [show, header] = make_display(game, $("#history"), false);
        //$("#history td").addClass("tiny3")
        //map.show = show;
        //map.heaer = header;
        return nmap;
    }

    tick25() {
        Object.keys(this.owner).map(k => {
            var who = this.owner[k];
            if (who !== undefined) {
                this.grid[k] += 1
            }
        })
    }

    render(show, header) {
        show.map(x=> $(x).text(""))
        show.map(x=> $(x).removeClass("red"))
        show.map(x=> $(x).removeClass("blue"))
        
        for (var i = 0; i < 2; i++) {
            var land = Object.keys(this.owner).map(k => [k, this.owner[k]]).filter(x => x[1] == i).map(x=> x[0])
            var army = land.map(x=>this.grid[x]).reduce((a,b) => 0+a+b);
            $(".army")[i].innerText = army
            $(".land")[i].innerText = land.length;
            console.log("Set", land.map(x=>this.grid[x]), this.turn)
        }
        Object.keys(this.owner).map(k => {
            $(show[k]).addClass(COL[this.owner[k]]);
        })
        for (var sq = 0; sq < this.w*this.h; sq++) {
            if (this.grid[sq] > 0 || this.cities.indexOf(sq) > -1) {
                show[sq].innerText = this.grid[sq];
            }
        }
        header.find("#turn").text("Turn: " + (this.turn/2))        
    }

    arrow(idx) {
        var circ = $("<div class='arrow down' style='position: absolute;'></div>");
        circ.css('left', this.show[idx].offsetLeft + $(this.show[idx]).width()/2 - 5);
        circ.css('top', this.show[idx].offsetTop + $(this.show[idx]).height()/2 - 5);
        $("#game").append(circ);
    }
    circle(idx) {
        var circ = $("<div class='circle' style='position: absolute;'></div>");
        circ.css('left', this.show[idx].offsetLeft);
        circ.css('top', this.show[idx].offsetTop);
        $("#game").append(circ);
    }
}

class Replay {
    constructor(moves, map) {
        var prev = null;
        for (var turn = 0; turn < Math.max(...moves.map(x=>x[4]), -1)+1; turn++) {
            var newtr = $("<tr class=moverow>");
            $("#moves").append(newtr)
            var this_moves = moves.filter(x=> x[4] == turn);
            var next = new ReplayNode(this, turn, this_moves, prev, newtr);
            if (turn == 0) {
                this.root = next;
            }
            if (prev) {
                prev.children.push(next)
            }
            prev = next;
        }
        this.map = map;
        this.current = this.root;
    }

    forward() {
        if (this.current.children.length > 0) {
            this.set_current(this.current.children[this.current.which_child]);
        }
    }

    set_current(next_current) {
        this.current.set_annotation($("#annotation").val())
        this.current = next_current;
        $("#annotation").val(this.current.annotation)
        var turntr= this.current.tr;
        if (this.prev_turntr) {
            this.prev_turntr.css("background", "")
        }
        if (turntr) {
            turntr[0].scrollIntoViewIfNeeded();
            turntr.css("background", "#aaa")
            this.prev_turntr = turntr;
        }
    }

    render() {
        this.current.map.render(show, header);
        var next = this.current;
        var t = 0;
        //$(".my_arrow").remove()
        console.log(this.current.turn, t);
        /*
        while (t++ < 2) {
            this.moves.filter(move => move[4] == next.turn).map(move=> {
                console.log("Q");
                var d = get_dir(move);
                var i = "EWNS".indexOf(d[1]);
                $(this.map).find("#"+move[1]).append('<div class="my_arrow ' + arrow_class[i] + '" style="' + arrow_where[i] + ': 0px;">' + arrows[i] + "<div>");
            })
            if (next.children === undefined || next.children.length == 0) break;
            next = next.children[0];
        }
        */
    }
    
    make(src, dx, dy) {
        var has_alternate = this.current.ever_moves(this.current.map.owner[src]);
        var [next_map, move] = this.current.map.make_move(src, dx, dy);

        console.log("ALT", has_alternate, this.current.children);
        if (move) {
            if (has_alternate) {
                next_map.render(show, header);
                var newtr = $("<tr class=moverow>")
                this.current.tr.after(newtr)
                var next = new ReplayNode(this, this.current.turn+1, [move], this.current, newtr);
                this.current.children.push(next);
                this.set_current(next);
            } else {
                this.current.moves.push(move)
                this.current.set_map();
                this.current.map.render(show, header);
                if (this.current.children.length > 0) {
                    this.set_current(this.current.children[0]);
                }
            }
            if (ALTERNATING) {
                which[move[0]] = move[2]
                select(1-move[0], which[1-move[0]]);
                who = 1-move[0];
            } else {
                select(move[0], move[2]);
            }

        }
    }

    serialize() {
        return [this.root.map.serialize(), this.root.serialize()]
    }
}

var ALTERNATING = 0;

class ReplayNode {
    constructor(root, turn, moves, parent, tr) {
        this.root = root;
        this.moves = moves;
        this.turn = turn;
        this.children = [];
        this.which_child = 0;
        this.parent = parent;
        this.tr = tr;
        
        if (tr) {
            this.tr.click(_ => {
                replay.set_current(this)
                replay.render();
            })
        }

        this.set_map();
        this.annotation = ""
    }

    set_annotation(anno) {
        this.annotation = anno;
        this.tr.children()[6].innerHTML = "<div class=annoshort></div>"
        this.tr.children()[6].children[0].innerText = this.annotation;
    }

    ever_moves(who) {
        console.log("Ever?", this.moves);
        if (this.moves.filter(x=>x[0] == who).length > 0) return true;
        if (this.children.length == 0) return false;
        return this.children[this.which_child].ever_moves(who);
    }
    
    set_map() {
        this.map = (this.parent ? this.parent.map : base_map).copy();
        this.moves.map(x=> {
            this.map = this.map.apply_move(x)
        });
        this.map.tick();

        if (this.tr) {
            this.tr[0].innerHTML = "<td>"+this.turn/2+"</td><td>"+get_dir(this.moves.filter(x=>x[0]==0)[0])+"</td><td>"+get_dir(this.moves.filter(x=>x[0]==1)[0])+"</td><td class=army></td><td class=land></td><td class=cities></td><td class=annoshort></td></tr>";
            
            
            this.tr.find(".army").text(this.map.count_army(0) - this.map.count_army(1))
            //this.tr.find(".army").css("background", "#FFF")
            this.tr.find(".land").text(this.map.count_land(0) - this.map.count_land(1))
            this.tr.find(".cities").text(this.map.count_cities(0) - this.map.count_cities(1))
        }
        
        this.children.map(x=> x.set_map());
    }
    
    mark_path() {
        if (this.parent) {
            var path = this.parent.mark_path();
            this.parent.which_child = this.parent.children.indexOf(this);
            path.push(this);
            return path;
        }
        return [this];
    }
    
    get_path() {
        if (this.parent) {
            var path = this.parent.get_path();
            path.push(this);
            return path;
        }
        return [this];
    }

    show_splits(depth) {
        var node = this;
        while(node.children.length == 1) {
            node = node.children[0];
        }
        $("#history").append("<div style='color: #fff'>"+depth+"</div>")
        var [show2, header2] = make_display(game, $("#history"), false);
        show2[0].parentElement.parentElement.parentElement.onclick = e => {
            console.log("Set", node);
            replay.set_current(node);
            replay.render();
            e.preventDefault();
        }
        node.map.render(show2, header2);
        show2.map(x=>$(x).addClass("tiny3"));
        
        node.children.map(x=>x.show_splits(depth+1));
    }

    serialize() {
        return [this.turn, this.moves, this.children.map(x=>x.serialize())]
    }
}

function restore() {
    var main = $("#game");
    var [map_state, replay_state] = state;
    HEIGHT = game[3];
    WIDTH = game[2];
    [show, header] = make_display(...map_state, main, true);
    base_map = new Map(...map_state, show, header);
    base_map.setup();
    replay = new Replay([], map);
    
    var root = restore_replay(null, replay_state);
    replay.current = replay.root = root;
    
}

function restore_replay(parent, state) {
    var [turn, moves, next] = state;
    var newtr = $("<tr>")
    $("#moves").append(newtr);
    var node = new ReplayNode(replay, turn, moves, parent, newtr)
    if (parent) {
        parent.children.push(node);
    }
    next.reverse().map(x=> restore_replay(node, x))
    return node;
}

function select(who, where) {
    which[who] = where;
    $("#map td").removeClass("selected")
    $(show[where]).addClass("selected")
}


var who = 0;
var which = [0, 0];
var base_map, replay, show, header;
var WIDTH, HEIGHT;
function main() {
    var main = $("#game");

    if (true) {
        HEIGHT = game[3];
        WIDTH = game[2];
        
        [show, header] = make_display(WIDTH, HEIGHT, game[8], [game[6], game[7]], game[9], main, true);
        
        base_map = new Map(WIDTH, HEIGHT, game[8], [game[6], game[7]], game[9], show, header);
        base_map.setup();
        
        replay = new Replay(game[10], $("#mapq"));
    } else {
        restore()
    }
    
    $("#history td").addClass("tiny3");

    //for (var i = 0; i < 48; i++) {
    //    replay.forward(false);
    //}

    window.onclick = x => {
        if (x.path[3].id == "map") {
            who = replay.current.map.owner[x.target.id];
            which[who] = x.target.id;
            select(who, which[who]);
        } else if (x.path[3].id == "moves") {
            return;
        }
    }

    $("#annotation").on('input', _ => {
        replay.current.set_annotation($("#annotation").val())
    })

    window.onkeydown = x=> {
        if (x.target.id == "annotation") return;
        if (x.key == "w") {
            replay.make(which[who], 0, -1);
        } else if (x.key == "s") {
            replay.make(which[who], 0, 1);
        } else if (x.key == "a") {
            replay.make(which[who], 1, 0);
        } else if (x.key == "d") {
            replay.make(which[who], -1, 0);
        } else if (x.key == "Enter") {
            replay.split();
        }
        if (x.key == "ArrowRight") {
            replay.forward(true);
            replay.render();
        } else if (x.key == "ArrowLeft") {
            if (replay.current.parent) {
                replay.current.mark_path();
                replay.set_current(replay.current.parent);
                replay.render();
            }
        }
        console.log("GO");
        $("#history").empty();
        //replay.root.show_splits(0);
    }
    replay.render();
}
//    return main;
//})();

var game = 
[10,"B9UcL57Vu",19,20,["enifmada","MeltedToast"],[66,69],[336,17,319,284,317,326,243,187,104,235],[42,42,43,42,43,45,43,47,44,48],[312,152],[4,6,21,24,29,32,33,49,54,57,58,60,61,62,65,70,72,80,85,93,112,113,114,116,129,134,135,139,143,144,145,149,158,159,174,176,177,178,179,182,189,195,200,201,209,210,211,212,213,215,221,225,231,232,237,246,247,258,264,270,282,294,296,298,302,304,307,311,313,315,323,331,343,353,361,365],[[0,312,293,0,20],[0,293,274,0,21],[0,274,275,0,22],[1,152,153,0,22],[1,153,154,0,23],[0,275,276,0,23],[0,276,277,0,24],[1,154,155,0,24],[1,155,156,0,25],[0,277,278,0,25],[0,278,279,0,26],[1,156,157,0,26],[1,157,138,0,27],[0,279,280,0,27],[0,280,299,0,28],[1,138,119,0,28],[1,119,120,0,29],[0,299,318,0,29],[0,312,293,0,30],[1,120,121,0,30],[1,121,140,0,31],[0,293,274,0,31],[0,274,255,0,32],[1,140,141,0,32],[1,152,153,0,33],[0,255,236,0,33],[0,236,217,0,34],[1,153,154,0,34],[1,154,155,0,35],[0,217,198,0,35],[0,198,197,0,36],[1,155,136,0,36],[1,136,137,0,37],[0,312,293,0,37],[0,293,274,0,38],[1,137,118,0,38],[1,118,99,0,39],[0,274,255,0,39],[0,255,254,0,40],[1,99,100,0,40],[1,152,153,0,41],[0,254,253,0,41],[0,253,252,0,42],[1,153,172,0,42],[1,172,173,0,43],[0,312,293,0,43],[0,293,274,0,44],[1,173,192,0,44],[1,192,193,0,45],[0,274,273,0,45],[0,273,272,0,46],[1,152,171,0,46],[1,171,190,0,47],[0,272,271,0,47],[0,312,293,0,48],[1,190,191,0,48],[1,152,133,0,49],[0,293,292,0,49],[1,133,152,0,50],[1,190,171,0,51],[0,292,291,0,51],[0,291,310,0,52],[1,171,152,0,52],[1,193,192,0,53],[0,310,329,0,53],[0,271,252,0,54],[1,192,173,0,54],[1,173,154,0,55],[0,252,251,0,55],[0,251,250,0,56],[1,191,172,0,56],[1,172,153,0,57],[0,253,254,0,57],[0,254,255,0,58],[1,136,155,0,58],[1,99,118,0,59],[0,272,273,0,59],[0,273,274,0,60],[1,118,137,0,60],[1,137,138,0,61],[0,197,198,0,61],[1,100,119,0,62],[0,278,279,0,63],[0,279,260,0,64],[1,152,153,0,64],[1,153,154,0,65],[0,260,241,0,65],[0,280,299,0,66],[1,154,155,0,66],[1,155,156,0,67],[0,299,318,0,67],[0,318,337,0,68],[1,156,157,0,68],[1,157,138,0,69],[0,337,356,0,69],[0,356,355,0,70],[1,138,119,0,70],[1,119,120,0,71],[0,277,276,0,71],[0,276,295,0,72],[1,120,121,0,72],[1,121,140,0,73],[0,295,314,0,73],[0,275,274,0,74],[1,140,141,0,74],[1,141,142,0,75],[0,312,293,0,75],[0,293,274,0,76],[1,142,161,0,76],[1,161,180,0,77],[0,274,255,0,77],[0,255,236,0,78],[1,180,199,0,78],[1,199,198,0,79],[0,236,217,0,79],[1,198,217,0,80],[1,152,153,0,83],[0,312,293,0,83],[0,293,292,0,84],[1,153,154,0,84],[1,154,155,0,85],[0,292,291,0,85],[0,291,290,0,86],[1,155,136,0,86],[1,136,117,0,87],[0,290,289,0,87],[0,289,288,0,88],[1,117,98,0,88],[1,98,79,0,89],[0,288,287,0,89],[0,312,293,0,90],[1,79,78,0,90],[1,78,59,0,91],[0,293,274,0,91],[0,274,255,0,92],[1,59,40,0,92],[1,40,41,1,93],[0,255,256,0,93],[0,256,257,0,94],[1,41,22,0,94],[1,40,39,0,95],[0,257,238,0,95],[0,238,219,0,96],[1,152,153,0,96],[1,153,154,0,97],[0,312,293,0,97],[0,293,292,0,98],[1,154,155,0,98],[1,155,156,0,99],[0,292,291,0,99],[0,291,310,0,100],[1,133,152,0,100],[1,190,171,0,101],[1,171,152,0,102],[1,193,194,0,103],[0,329,310,0,103],[0,310,291,0,104],[1,192,173,0,104],[1,173,154,0,105],[0,287,288,0,105],[0,288,289,0,106],[1,191,172,0,106],[1,172,153,0,107],[0,289,290,0,107],[0,290,291,0,108],[1,39,40,0,108],[1,22,41,0,109],[0,291,292,0,109],[0,292,293,0,110],[1,41,40,0,110],[1,40,59,0,111],[0,355,354,0,111],[0,356,337,0,112],[1,59,78,0,112],[1,78,79,0,113],[0,337,318,0,113],[0,318,299,0,114],[1,79,98,0,114],[1,98,99,0,115],[0,299,280,0,115],[0,260,241,0,116],[1,99,100,0,116],[1,117,118,0,117],[0,241,222,0,117],[0,222,203,0,118],[1,118,119,0,118],[1,136,137,0,119],[0,280,279,0,119],[0,279,278,0,120],[1,137,138,0,120],[0,278,277,0,121],[0,277,276,0,122],[1,100,119,0,122],[1,153,154,0,123],[0,314,295,0,123],[0,295,276,0,124],[1,152,153,0,124],[1,153,154,0,125],[0,219,218,0,125],[0,238,257,0,126],[1,154,155,0,126],[1,155,156,0,127],[0,257,276,0,127],[0,276,275,0,128],[1,156,157,0,128],[1,157,138,0,129],[0,275,274,0,129],[0,256,255,0,130],[1,138,119,0,130],[1,119,120,0,131],[0,252,233,0,131],[0,253,234,0,132],[1,120,121,0,132],[1,121,122,0,133],[0,251,250,0,133],[0,250,249,0,134],[1,122,123,0,134],[1,123,142,0,135],[0,249,230,0,135],[0,271,272,0,136],[1,142,161,0,136],[1,161,180,0,137],[0,272,273,0,137],[0,273,274,0,138],[1,180,199,0,138],[1,199,218,0,139],[0,254,255,0,139],[0,312,293,0,140],[1,218,217,0,140],[1,217,236,0,141],[0,293,274,0,141],[0,274,255,0,142],[1,236,255,0,142],[0,255,236,0,143],[0,236,217,0,144],[1,141,160,0,145],[0,217,218,0,145],[0,218,199,0,146],[1,140,121,0,146],[1,121,102,0,147],[0,197,196,0,148],[1,152,153,0,149],[0,199,218,0,150],[1,153,154,0,150],[1,194,193,0,151],[0,203,184,0,152],[1,193,192,0,152],[1,192,173,0,153],[0,222,241,0,153],[0,241,260,0,154],[1,173,154,0,154],[1,22,23,0,155],[0,260,279,0,155],[0,354,355,0,156],[1,39,40,0,156],[1,41,40,0,157],[0,355,356,0,157],[0,356,337,0,158],[1,40,59,0,158],[1,59,78,0,159],[0,337,318,0,159],[0,318,299,0,160],[1,78,79,0,160],[1,79,98,0,161],[0,299,280,0,161],[0,280,279,0,162],[1,98,99,0,162],[1,99,100,0,163],[0,279,278,0,163],[0,278,277,0,164],[1,100,119,0,164],[1,133,152,0,165],[0,277,276,0,165],[0,314,333,0,166],[1,191,172,0,166],[1,172,153,0,167],[0,295,276,0,167],[0,276,275,0,168],[1,190,171,0,168],[1,171,152,0,169],[0,275,274,0,169],[0,310,309,0,170],[1,157,138,0,170],[1,138,119,0,171],[0,329,348,0,171],[0,287,306,0,172],[1,156,137,0,172],[1,137,118,0,173],[0,288,269,0,173],[0,249,248,0,174],[1,152,153,0,174],[1,153,154,0,175],[0,230,229,0,175],[0,250,251,0,176],[1,154,155,0,176],[1,155,136,0,177],[0,251,252,0,177],[0,252,253,0,178],[1,136,117,0,178],[1,117,118,0,179],[0,253,254,0,179],[0,254,255,0,180],[1,118,119,0,180],[1,119,120,0,181],[0,233,214,0,181],[0,257,256,0,182],[1,120,121,0,182],[1,121,122,0,183],[0,256,255,0,183],[1,122,123,0,184],[1,123,142,0,185],[0,238,219,0,185],[0,312,293,0,186],[1,142,161,0,186],[1,161,180,0,187],[0,293,274,0,187],[0,274,255,0,188],[1,180,199,0,188],[1,199,218,0,189],[0,255,236,0,189],[1,218,219,0,190],[1,219,238,0,191],[0,236,255,0,191],[0,255,256,0,192],[1,238,239,0,192],[1,239,240,0,193],[0,256,257,0,193],[0,257,276,0,194],[1,240,259,0,194],[1,259,260,0,195],[0,276,277,0,195],[0,277,278,0,196],[1,260,261,0,196],[1,261,242,0,197],[0,278,279,0,197],[0,279,280,0,198],[1,242,241,0,198],[1,241,222,0,199],[0,280,261,0,199],[0,261,260,0,200],[1,222,203,0,200],[1,203,184,0,201],[0,260,259,0,201],[0,259,278,0,202],[1,184,203,0,203],[0,278,277,0,203],[0,277,276,0,204],[1,203,222,0,204],[0,333,314,0,205],[0,314,295,0,206],[1,23,22,0,206],[1,22,41,0,207],[0,295,276,0,207],[0,276,275,0,208],[1,39,40,0,208],[1,41,40,0,209],[0,275,274,0,209],[1,40,59,0,210],[1,59,78,0,211],[0,348,367,0,211],[0,329,328,0,212],[1,78,79,0,212],[1,79,98,0,213],[0,289,290,0,213],[1,98,117,0,214],[1,117,136,0,215],[0,309,310,0,215],[0,290,291,0,216],[1,136,155,0,216],[1,193,192,0,217],[0,291,292,0,217],[0,271,272,0,218],[1,192,173,0,218],[1,173,154,0,219],[0,272,273,0,219],[0,310,291,0,220],[1,191,172,0,220],[1,172,153,0,221],[0,291,292,0,221],[0,292,293,0,222],[1,190,171,0,222],[1,171,152,0,223],[0,273,274,0,223],[0,293,274,0,224],[1,133,152,0,224],[1,152,153,0,225],[0,274,255,0,225],[0,255,236,0,226],[1,153,154,0,226],[1,154,155,0,227],[0,236,217,0,227],[0,217,198,0,228],[1,155,156,0,228],[1,156,157,0,229],[0,198,199,0,229],[0,199,180,0,230],[1,222,241,0,230],[1,241,260,0,231],[0,180,161,0,231],[0,161,142,0,232],[1,260,259,0,232],[1,259,278,0,233],[0,142,123,0,233],[0,123,122,0,234],[1,278,277,0,234],[1,277,276,0,235],[0,122,121,0,235],[0,121,120,0,236],[1,157,138,0,236],[1,138,119,0,237],[0,120,119,0,237],[1,119,120,0,238],[1,276,275,0,239],[0,312,293,0,240],[1,275,274,0,240],[1,274,255,0,241],[0,293,274,0,241],[0,274,275,0,242],[1,255,236,0,242],[1,236,217,0,243],[0,275,274,0,243],[0,274,255,0,244],[1,217,198,0,244],[1,198,199,0,245],[0,255,236,0,245],[0,236,217,0,246],[1,199,180,0,246],[1,180,161,0,247],[0,217,218,0,247],[0,218,199,0,248],[1,161,142,0,248],[1,142,123,0,249],[0,199,180,0,249],[0,180,161,0,250],[1,160,141,0,250],[1,141,122,0,251],[1,102,121,0,252],[1,23,22,0,253],[0,354,355,0,253],[0,355,356,0,254],[1,22,41,0,254],[1,39,40,0,255],[0,356,357,0,255],[1,41,40,0,257],[0,357,338,0,257],[0,338,339,0,258],[1,40,59,0,258],[1,59,78,0,259],[0,339,320,0,259],[0,320,301,0,260],[1,78,79,0,260],[1,79,98,0,261],[0,301,300,0,261],[0,337,318,0,262],[1,98,99,0,262],[1,99,118,0,263],[0,318,299,0,263],[0,299,280,0,264],[1,100,81,0,264],[1,81,82,0,265],[0,280,279,0,265],[0,279,260,0,266],[1,157,138,0,266],[1,138,119,0,267],[0,260,241,0,267],[0,241,240,0,268],[1,156,137,0,268],[1,137,118,0,269],[0,161,160,0,269],[0,160,141,0,270],[1,194,193,0,270],[1,193,192,0,271],[0,141,122,0,271],[1,192,173,0,272],[1,173,154,0,273],[0,229,248,0,273],[0,230,249,0,274],[1,152,153,0,274],[1,153,154,0,275],[0,248,249,0,275],[0,249,250,0,276],[1,154,155,0,276],[1,155,136,0,277],[0,306,287,0,277],[0,287,288,0,278],[1,136,117,0,278],[1,117,118,0,279],[0,288,269,0,279],[0,269,250,0,280],[1,118,119,0,280],[1,119,120,0,281],[0,250,251,0,281],[0,251,252,0,282],[1,120,121,0,282],[1,121,122,0,283],[0,252,253,0,283],[0,253,254,0,284],[1,122,141,0,284],[1,141,160,0,285],[0,254,255,0,285],[0,312,293,0,286],[1,160,161,0,286],[1,161,180,0,287],[0,293,274,0,287],[0,274,255,0,288],[1,180,199,0,288],[1,199,218,0,289],[0,255,236,0,289],[1,218,219,0,290],[1,219,238,0,291],[0,236,255,0,291],[0,255,256,0,292],[1,238,239,0,292],[1,239,240,0,293],[0,256,257,0,293],[0,257,276,0,294],[1,240,241,0,294],[1,241,260,0,295],[0,276,277,0,295],[0,277,278,0,296],[1,260,261,0,296],[1,261,280,0,297],[0,278,259,0,297],[0,259,240,0,298],[1,280,299,0,298],[1,299,318,0,299],[0,240,239,0,299],[0,239,238,0,300],[1,318,337,0,300],[1,337,356,0,301],[0,238,257,0,301],[0,257,276,0,302],[1,356,355,0,302],[1,355,354,0,303],[0,276,275,0,303],[0,275,274,0,304],[1,354,335,0,304],[1,335,334,0,305],[0,333,352,0,306],[1,334,333,0,306],[0,352,371,0,307],[1,23,22,0,309],[1,22,41,0,310],[1,41,40,0,311],[0,274,275,0,311],[0,275,276,0,312],[1,39,40,0,312],[1,40,59,0,313],[0,276,295,1,313],[0,295,314,0,314],[1,59,78,0,314],[1,78,79,0,315],[0,314,333,0,315],[0,333,334,0,316],[1,79,98,0,316],[1,98,117,0,317],[0,334,335,0,317],[1,191,172,0,318],[1,172,153,0,319],[0,276,275,0,319],[0,275,274,0,320],[1,190,171,0,320],[1,171,152,0,321],[0,196,197,0,321],[0,197,198,0,322],[1,133,152,0,322],[1,140,141,0,323],[0,214,233,0,323],[0,233,234,0,324],[1,141,142,0,324],[1,184,185,0,325],[0,234,253,0,325],[0,253,272,0,326],[1,185,166,0,326],[1,173,154,0,327],[0,367,368,0,327],[0,368,369,0,328],[1,152,153,0,328],[1,153,154,0,329],[0,348,349,0,329],[0,349,350,0,330],[1,154,155,0,330],[1,155,136,0,331],[0,328,309,0,331],[0,309,290,0,332],[1,136,117,0,332],[1,117,118,0,333],[0,329,310,0,333],[0,310,291,0,334],[1,118,119,0,334],[1,119,120,0,335],[0,289,290,0,335],[0,290,291,0,336],[1,120,121,0,336],[1,121,122,0,337],[0,291,292,0,337],[0,292,293,0,338],[1,122,123,0,338],[1,123,142,0,339],[0,271,272,0,339],[0,272,273,0,340],[1,142,161,0,340],[1,161,180,0,341],[0,273,274,0,341],[0,312,293,0,342],[1,180,199,0,342],[1,199,198,0,343],[0,293,274,0,343],[0,274,255,0,344],[1,198,217,0,344],[1,217,236,0,345],[0,255,236,0,345],[0,236,217,0,346],[0,217,198,0,347],[0,198,199,0,348],[1,203,222,0,348],[1,222,241,0,349],[0,199,180,0,349],[0,180,161,0,350],[1,241,240,0,350],[1,240,239,0,351],[0,161,180,0,351],[0,180,199,0,352],[0,339,338,0,354],[1,166,167,0,354],[1,185,186,0,355],[0,338,357,0,355],[0,357,356,0,356],[1,184,183,0,356],[1,82,81,0,357],[0,356,337,0,357],[0,320,301,0,358],[1,81,100,0,358],[1,100,119,0,359],[0,301,300,0,359],[0,300,299,0,360],[1,157,138,0,360],[1,138,119,0,361],[0,299,280,0,361],[0,279,280,0,362],[1,194,193,0,362],[1,193,192,0,363],[0,278,259,0,363],[0,259,240,0,364],[1,192,173,0,364],[1,173,154,0,365],[0,240,241,0,365],[0,277,276,0,366],[1,191,172,0,366],[1,172,153,0,367],[0,306,287,0,368],[1,190,171,0,368],[1,171,152,0,369],[0,287,288,0,369],[0,229,248,0,370],[1,133,152,0,370],[1,152,153,0,371],[0,230,249,0,371],[0,248,249,0,372],[1,153,154,0,372],[1,154,155,0,373],[0,249,250,0,373],[0,288,269,0,374],[1,155,156,0,374],[1,156,137,0,375],[0,269,250,0,375],[0,250,251,0,376],[1,137,118,0,376],[1,118,119,0,377],[0,251,252,0,377],[0,252,253,0,378],[1,119,120,0,378],[1,120,121,0,379],[0,253,254,0,379],[0,254,255,0,380],[1,121,140,0,380],[1,140,141,0,381],[0,276,257,0,381],[0,257,238,0,382],[1,141,160,0,382],[1,160,161,0,383],[0,238,219,0,383],[0,312,293,0,384],[1,161,180,0,384],[1,180,199,0,385],[0,293,274,0,385],[0,274,255,0,386],[1,199,198,0,386],[1,198,217,0,387],[0,255,256,1,387],[0,256,257,0,388],[1,217,218,0,388],[1,218,219,0,389],[0,257,238,0,389],[0,238,219,0,390],[1,219,238,0,390],[1,238,239,0,391],[0,255,236,0,392],[1,242,241,0,392],[1,241,240,0,393],[0,236,217,0,393],[0,217,218,0,394],[1,261,280,0,394],[1,260,259,0,395],[0,218,199,0,395],[0,199,180,0,396],[1,203,204,0,396],[1,354,355,0,397],[0,180,161,0,397],[0,161,160,0,398],[1,355,356,0,398],[1,222,223,0,399],[0,160,141,0,399],[0,141,140,0,400],[1,167,148,0,400],[1,166,147,0,401],[1,184,165,0,402],[1,183,164,0,403],[0,369,368,0,403],[0,368,367,0,404],[1,23,22,0,404],[1,22,41,0,405],[0,350,349,0,405],[0,349,348,0,406],[1,41,40,0,406],[1,39,40,0,407],[0,367,348,0,407],[0,348,329,0,408],[1,40,59,0,408],[1,59,78,0,409],[0,328,329,0,409],[0,329,310,0,410],[1,78,79,0,410],[1,79,98,0,411],[0,310,291,0,411],[0,309,290,0,412],[1,98,99,0,412],[1,99,118,0,413],[0,289,290,0,413],[0,290,291,0,414],[1,190,171,0,414],[1,171,152,0,415],[0,291,292,0,415],[0,292,293,0,416],[1,191,172,0,416],[1,172,153,0,417],[0,371,352,0,417],[0,352,333,0,418],[1,133,152,0,418],[1,102,121,0,419],[0,333,334,0,419],[0,334,335,0,420],[1,123,122,0,420],[1,152,153,0,421],[0,335,354,0,421],[0,354,373,0,422],[1,153,154,0,422],[1,154,155,0,423],[0,373,374,0,423],[1,155,136,0,424],[1,136,117,0,425],[0,314,295,0,425],[0,295,276,0,426],[1,117,118,0,426],[1,118,119,0,427],[0,276,275,0,427],[0,275,274,0,428],[1,119,120,0,428],[1,120,121,0,429],[0,312,293,0,429],[0,293,274,0,430],[1,121,140,0,430],[1,140,141,0,431],[0,274,255,0,431],[0,255,236,0,432],[1,122,141,0,432],[1,141,160,0,433],[0,236,217,0,433],[0,217,218,0,434],[1,160,161,0,434],[1,161,162,0,435],[0,218,199,0,435],[0,199,180,0,436],[1,162,163,0,436],[1,163,164,0,437],[0,180,161,0,437],[0,161,160,0,438],[1,164,183,0,438],[1,183,184,0,439],[0,160,141,0,439],[0,141,140,0,440],[1,184,203,0,440],[1,203,222,0,441],[0,140,121,0,441],[0,121,120,0,442],[1,222,241,0,442],[1,241,240,0,443],[0,120,119,0,443],[0,119,118,0,444],[1,240,239,0,444],[1,239,238,0,445],[0,118,117,0,445],[0,117,98,0,446],[1,238,257,0,446],[1,257,276,0,447],[0,98,79,0,447],[0,79,78,0,448],[1,276,275,0,448],[1,275,274,0,449],[0,78,59,0,449],[0,59,40,0,450],[1,274,273,0,450],[1,273,292,0,451],[0,40,41,0,451],[0,41,22,0,452],[1,292,293,0,452],[1,293,312,0,453]],[],[2,1],null,[],[],[],[["gl hf","",1,6],["you too","",0,10]],[0,1],[],[1,0.5,0.5,0]]
